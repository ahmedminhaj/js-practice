chapter 01::
Symbolic Constants::
	#define name replacement-txt
	#define lower 0
const vs #define::
	#define is pre-processor directive while const is a keyword
	#define is not scope controlled whereas const is scope controlled
	Macros (#define) can be redefined but const cannot
character input output::
	getchar() function is used to get/read a character from keyboard input.
	putchar() function is used to write a character on standard output/screen.
call by value::
	functionName(variable)
	the value of the variable is used in the function call in the call by value method.
	the value of the actual parameters is copied into the formal parameters.
	can not modify the value of the actual parameter by the formal parameter.
	different memory is allocated for actual and formal parameters.
call by reference::
	functionName(&variableName)
	the address of the variable is passed into the function call as the actual parameter.
	value of the actual parameters can be modified by changing the formal parameters.
	the memory allocation is similar for both formal parameters and actual parameters.

chapter 02::
Type Conversion::
	implicit type conversion:
		Also known as ‘automatic type conversion’. Done by the compiler on its own. 
		Type conversion (type promotion) takes place to avoid lose of data.
		to lose information, overflow can occur.
	explicit type conversion:
		type casting and it is user defined. 
		to take advantage of certain features of type hierarchies or type representations.
		compute expressions containing variables of different data types.

Loop::
	while loop::
		while (condition){
            		statements;
		}
	Do-while::
		do{
			statements
		} while (expression);
	for loop::
		for (initial value; condition; incrementation or decrementation ){
			statements;
		}

Jump statement::
	Break:: Break statement is used to discontinue the normal execution of the code without any condition,
		and it will jumps out from the current executing loop.
	Continue:: it will not jump out of the loop instead stop executing the set instructions inside loop body for current iteration 
		and jumps to execute the body of loop for next iterations.
	Goto::  This statement is a unconditional jump statement. 
		It can be used anywhere in the program to jump from its current execution to some other lines in the code. 
		Once it is jumped to some other line, it will continue executing the codes from there sequentially. 
		It cannot come back again to previous execution lines.

Scope Rules::
	Scope of an identifier is the part of the program where the identifier may directly be accessible.
	global scope::Can be accessed anywhere in a program.
	block scope:: A Block is a set of statements enclosed within left and right braces.

Storage class in c::
	auto:: within ablock 
	extern:: global multiple files
	static:: within a block, static variables preserve their previous value in their previous scope and are not initialized again in the new scope.
	register:: within a block

Recursion:: C functions may be used recursively, that is, a function may be call itself either directly or indirectly.

Chapter::5
Pointers::
	A pointer is a variable whose value is the address of another variable, direct address of the memory location.
	define a pointer variable, assign the address of a variable to a pointer, finally access the value at the address available in the pointer variable.
	Normal variable stores the value whereas pointer variable stores the address of the variable.
	& symbol is used to get the address of the variable. 
	* symbol is used to get the value of the variable that the pointer is pointing to.
	Two pointers can be subtracted to know how many elements are available between these two pointers.
	but pointer addition, multiplication, division is not possible.
	size of a array is 2 byte.

	NULL Pointers:: Always C pointer is initialized to null, i.e. int *p = null.
			a pointer in C is assigned to NULL, it means it is pointing to nothing.
Pointer to pointer ::
	a pointer holds the address of another pointer. declaretion:: int **pr;
Pointer to a function::
	pass a pointer as an argument instead of a variable then the address of the variable is passed instead of the value.
	any change made by the function using the pointer is permanently made at the address of passed variable.
	technique is known as call by reference in C.
Function Pointer::
	int *f(); 
	f: function returning pointer to int
	int (*pf)(); 
	pf: pointer to function returning int
Pointer array::
	&x[i] is equivalent to x+i and x[i] is equivalent to *(x+i).
pointer to an array::
	points to the whole array.
Pointers and two dimensional Arrays::
	can access each element by using two subscripts, 
	where first subscript represents the row number and second subscript represents the column number.
	can access any element arr[i][j] of the array using the pointer expression *(*(arr + i) + j).

Dynamic memory allocation::
	C language provides features to manual management of memory
	can manage memory at run time,
	require memory allocation or reallocation at run time.
	> malloc()::used to allocate specified number of bytes (memory blocks).
	> calloc()::used to allocate specified number of bytes (memory blocks) and initialize all memory with 0.
	> reaclloc()::used to reallocate the dynamically allocated memory to increase or decrease amount of the memory.
	> free()::used to release dynamically allocated memory.

chapter::6
Structure::
	structure is a user defined data type in C/C++. 
	structure creates a data type that can be used to group items of possibly different types into a single type.
	‘struct’ keyword is used to create a structure.
	structure variable can either be declared with structure declaration or as a separate declaration like basic types.
	when a datatype is declared, no memory is allocated for it. 
	Memory is allocated only when variables are created. 
	Structure members can be initialized using curly braces ‘{}’.
	Structure members are accessed using dot (.) operator.
	Designated Initialization allows structure members to be initialized in any order.
	a pointer to structure, members are accessed using arrow ( -> ) operator.
	r.pt1.x
	rp->pt1.x
	(r.pt1).x
	(rp->pt1).x
	all r same expression.
Structure and function::
	A structure can be passed to any function from main function or from any sub function.
	structure variable should be declared outside the main function. 
	So, this structure will be visible to all the functions in a C program.	
Array of structure::
	An array of structres in C can be defined as the collection of multiple structures variables 
	where each variable contains information about different entities.
	store information about multiple entities of different data types.

pointers to structure::
	
self-referential structure::
	have one or more pointers which point to the same type of structure, as their member.
Self Referential Structure with Single Link: 
	These structures can have only one self-pointer as their member, access the corresponding data members.
	the pointer should be initialized properly or NULL before accessing,
	by default it contains garbage value.
Self referential structures with multiple links:
	have more than one self-pointers.
	tructures can easily connect to more than one nodes at a time.
Typedef::
	typedef for creating data type names, also use to create structure and pointer to the structure.  
	a typedef declaration does not create a new type in any sense; it merely adds a new name for some existing type.
Unions::
	is a variable that may hold at objects of different types and sizes, 
	with the compiler keeping track of size and alignment requirements.
	provide a way to manipulate different kinds of data in a single area of storage, 
	without embedding any machine-dependent information in the program.
	union is a special data type available in C that allows to store different data types in the same memory location.
	define a union with many members, but only one member can contain a value at any given time.
	provide an efficient way of using the same memory location for multiple-purpose.
	To access any member of a union, need to use the member access operator (.).
Bit-fields::
	offers a better way to utilize the memory space in such situations.
	by using such variable inside a structure can define the width of a variable,
	which tells the compailer to use only those number of bytes.